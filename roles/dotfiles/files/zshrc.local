# Update PATH
export PATH="/opt/homebrew/bin:$HOME/bin/:$HOME/go/bin/:$HOME/.cargo/bin/:${PATH}"
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
export PATH="/opt/homebrew/opt/gnu-getopt/bin:$PATH"

export VISUAL=nvim
export EDITOR="nvim"
export TERM="xterm-256color"
export COLORTERM="truecolor"

export GPG_TTY=$(tty)

# MacOS is the fancy one :)
case `uname` in
  Darwin)
      alias ls=exa

      # Plugins
      source $(arch -$(uname -m) brew --prefix fzf)/shell/completion.zsh
      source $(arch -$(uname -m) brew --prefix fzf)/shell/key-bindings.zsh
      source $(arch -$(uname -m) brew --prefix zsh-autosuggestions)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
      source $(arch -$(uname -m) brew --prefix zsh-syntax-highlighting)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
      source $(arch -$(uname -m) brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc
  ;;
esac

alias tf=terraform

alias g=git
alias j=jsonnet
alias k=kubectl
alias v=nvim

__cd_ls() { cd $1; ls; }
alias cd=__cd_ls


# Shortcuts
kcc(){kubectl config use-context $(kubectl config get-contexts -o name | fzf --reverse --height 40%) && tmux refresh-client -S}
ka(){kubectl apply $@}
kd(){kubectl delete $@}
kg(){kubectl get $@}
kgp(){kubectl get pods -o wide $@}
kga(){kubectl get all $@}
kgi(){kubectl get ingress $@}
kgs(){kubectl get services $@}
kgg(){kubectl get Gatewayss $@}
kgdr(){kubectl get DestinationRule $@}
kgvs(){kubectl get VirtualService $@}
kgns(){kubectl get namespaces $@}
kgss(){kubectl get secrets $@}
kgcm(){kubectl get cm $@}
kdbg(){kubectl run tmp-net-debug-shell -it --rm --image nicolaka/netshoot -- /bin/bash}
kgk() {kubectl get kustomization -o custom-columns=name:.metadata.name,suspend:.spec.suspend,status:".status.conditions[0].status",reason:".status.conditions[0].reason"} # Useful when working with flux
kgoom() {
  kubectl get pods "$@" --output=jsonpath='{ range .items[*] }{.metadata.namespace}    {.metadata.name}    {.status.containerStatuses[*].name}    {.status.containerStatuses[*].lastState.terminated.reason }    {.status.containerStatuses[*].lastState.terminated.finishedAt}{"\n"}{end}' | grep OOMKilled
}
klogs() {
  set -o pipefail
  PODS=$(kubectl get pods "$@" --field-selector status.phase=Running -o=jsonpath='{ range .items[*] }{.metadata.name} {.spec.containers[*].name}{"\n"}{ end }' --no-headers)

  if [[ -z $PODS ]]; then
    echo "No pods found in this namespace"
    exit 1
  fi

  allContainers=""
  while read -r line; do
    pod=$(echo "$line" | grep -Eo "^[A-Za-z0-9-]+")
    newContainers=$(echo "$line" | sed "s/$pod //" | gsed -E "s/([A-Za-z0-9-]+) ?/$pod --container=&\\n/g" | sed "/^$/d")
    allContainers="$allContainers$newContainers"$'\n'
  done <<< "$PODS"

  echo "$allContainers" | fzf --prompt "choose pod/container > " --preview "echo {} | xargs kubectl logs $* --tail=50" --height=100% --preview-window=right:80% --layout=default --bind="enter:execute(echo {} | xargs kubectl logs $* | bat --color always)+abort"
}

# go up one time
function __one_dir_up() {
  BUFFER="cd .."
  zle accept-line
}
zle -N __one_dir_up
bindkey "^k" __one_dir_up

# Autocompletion with strg+space
bindkey '^ ' autosuggest-accept

secret () {
        output=~/"${1}".$(date +%s).enc
        gpg --encrypt --armor --output ${output} -r matthias@xvzf.tech "${1}" && echo "${1} -> ${output}"
}

reveal () {
        output=$(echo "${1}" | rev | cut -c16- | rev)
        gpg --decrypt --output ${output} "${1}" && echo "${1} -> ${output}"
}

workmode () {
  export WORKMODE=1
  export ANKORSTORE_ZSH_PLUGIN_DISABLE=1
  source $(brew --prefix)/share/ankor/ankor.zsh
  export KUBECONFIG=~/.kube/config-ankorstore
  source <(ankor-plugin-zsh)
}

# Check if we are in workmode (by env var). If yes, load stuff
if [ ! -z "$WORKMODE" ]; then
  workmode
fi



